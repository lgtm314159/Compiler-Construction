Starting parse
Entering state 0
Reading a token: Next token is token TOKEN_PROGRAM ()
Shifting token TOKEN_PROGRAM ()
Entering state 1
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 3
Reading a token: Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 5
Reading a token: Next token is token TOKEN_VAR ()
Reducing stack by rule 3 (line 88):
-> $$ = nterm groupTypeDefinitions ()
Stack now 0 1 3 5
Entering state 7
Next token is token TOKEN_VAR ()
Shifting token TOKEN_VAR ()
Entering state 12
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 17
Reducing stack by rule 96 (line 195):
   $1 = token TOKEN_ID ()
-> $$ = nterm identifierList ()
Stack now 0 1 3 5 7 12
Entering state 20
Reading a token: Next token is token TOKEN_COMMAS ()
Shifting token TOKEN_COMMAS ()
Entering state 33
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 46
Reducing stack by rule 95 (line 195):
   $1 = nterm identifierList ()
   $2 = token TOKEN_COMMAS ()
   $3 = token TOKEN_ID ()
-> $$ = nterm identifierList ()
Stack now 0 1 3 5 7 12
Entering state 20
Reading a token: Next token is token TOKEN_COMMAS ()
Shifting token TOKEN_COMMAS ()
Entering state 33
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 46
Reducing stack by rule 95 (line 195):
   $1 = nterm identifierList ()
   $2 = token TOKEN_COMMAS ()
   $3 = token TOKEN_ID ()
-> $$ = nterm identifierList ()
Stack now 0 1 3 5 7 12
Entering state 20
Reading a token: Next token is token TOKEN_COLON ()
Shifting token TOKEN_COLON ()
Entering state 34
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 30
Reducing stack by rule 47 (line 148):
   $1 = token TOKEN_ID ()
-> $$ = nterm type ()
Stack now 0 1 3 5 7 12 20 34
Entering state 47
Reading a token: Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 72
Reducing stack by rule 20 (line 109):
   $1 = nterm identifierList ()
   $2 = token TOKEN_COLON ()
   $3 = nterm type ()
   $4 = token TOKEN_SEMICOLON ()
-> $$ = nterm variableDeclaration ()
Stack now 0 1 3 5 7 12
Entering state 19
Reducing stack by rule 13 (line 99):
   $1 = nterm variableDeclaration ()
-> $$ = nterm variableDeclarationList ()
Stack now 0 1 3 5 7 12
Entering state 18
Reading a token: Next token is token TOKEN_FUNCTION ()
Reducing stack by rule 11 (line 96):
   $1 = token TOKEN_VAR ()
   $2 = nterm variableDeclarationList ()
-> $$ = nterm variableDeclarations ()
Stack now 0 1 3 5 7
Entering state 14
Reducing stack by rule 4 (line 89):
   $1 = nterm variableDeclarations ()
-> $$ = nterm groupVariableDeclarations ()
Stack now 0 1 3 5 7
Entering state 13
Next token is token TOKEN_FUNCTION ()
Shifting token TOKEN_FUNCTION ()
Entering state 21
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 35
Reading a token: Next token is token TOKEN_LPAR ()
Shifting token TOKEN_LPAR ()
Entering state 48
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 17
Reducing stack by rule 96 (line 195):
   $1 = token TOKEN_ID ()
-> $$ = nterm identifierList ()
Stack now 0 1 3 5 7 13 21 35 48
Entering state 75
Reading a token: Next token is token TOKEN_COMMAS ()
Shifting token TOKEN_COMMAS ()
Entering state 33
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 46
Reducing stack by rule 95 (line 195):
   $1 = nterm identifierList ()
   $2 = token TOKEN_COMMAS ()
   $3 = token TOKEN_ID ()
-> $$ = nterm identifierList ()
Stack now 0 1 3 5 7 13 21 35 48
Entering state 75
Reading a token: Next token is token TOKEN_COLON ()
Shifting token TOKEN_COLON ()
Entering state 95
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 30
Reducing stack by rule 47 (line 148):
   $1 = token TOKEN_ID ()
-> $$ = nterm type ()
Stack now 0 1 3 5 7 13 21 35 48 75 95
Entering state 129
Reducing stack by rule 28 (line 123):
   $1 = nterm identifierList ()
   $2 = token TOKEN_COLON ()
   $3 = nterm type ()
-> $$ = nterm formalParamSeq ()
Stack now 0 1 3 5 7 13 21 35 48
Entering state 74
Reading a token: Next token is token TOKEN_RPAR ()
Reducing stack by rule 25 (line 120):
   $1 = nterm formalParamSeq ()
-> $$ = nterm formalParameterList ()
Stack now 0 1 3 5 7 13 21 35 48
Entering state 73
Next token is token TOKEN_RPAR ()
Shifting token TOKEN_RPAR ()
Entering state 93
Reading a token: Next token is token TOKEN_COLON ()
Shifting token TOKEN_COLON ()
Entering state 127
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 146
Reducing stack by rule 50 (line 151):
   $1 = token TOKEN_ID ()
-> $$ = nterm resultType ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127
Entering state 147
Reading a token: Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 169
Reading a token: Next token is token TOKEN_BEGIN ()
Reducing stack by rule 5 (line 89):
-> $$ = nterm groupVariableDeclarations ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169
Entering state 150
Next token is token TOKEN_BEGIN ()
Shifting token TOKEN_BEGIN ()
Entering state 37
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 53
Reading a token: Next token is token TOKEN_ASSIGN ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 53
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37
Entering state 62
Next token is token TOKEN_ASSIGN ()
Shifting token TOKEN_ASSIGN ()
Entering state 88
Reading a token: Next token is token TOKEN_ID ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88
Entering state 78
Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_EQ ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 78 100
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 78
Entering state 106
Reducing stack by rule 82 (line 181):
   $1 = nterm variable ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 78 104
Entering state 136
Next token is token TOKEN_EQ ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 78 103
Entering state 135
Next token is token TOKEN_EQ ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88
Entering state 80
Next token is token TOKEN_EQ ()
Shifting token TOKEN_EQ ()
Entering state 108
Reducing stack by rule 66 (line 167):
   $1 = token TOKEN_EQ ()
-> $$ = nterm relationalOp ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80
Entering state 115
Reading a token: Next token is token TOKEN_ID ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115
Entering state 78
Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_MULTIPLY ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 100
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78
Entering state 106
Reducing stack by rule 82 (line 181):
   $1 = nterm variable ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104
Entering state 136
Next token is token TOKEN_MULTIPLY ()
Shifting token TOKEN_MULTIPLY ()
Entering state 163
Reducing stack by rule 76 (line 179):
   $1 = token TOKEN_MULTIPLY ()
-> $$ = nterm mulOp ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136
Entering state 164
Reading a token: Next token is token TOKEN_LPAR ()
Shifting token TOKEN_LPAR ()
Entering state 102
Reading a token: Next token is token TOKEN_ID ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102
Entering state 78
Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_DIV ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102 78 100
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102 78
Entering state 106
Reducing stack by rule 82 (line 181):
   $1 = nterm variable ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102 78 104
Entering state 136
Next token is token TOKEN_DIV ()
Shifting token TOKEN_DIV ()
Entering state 161
Reducing stack by rule 77 (line 179):
   $1 = token TOKEN_DIV ()
-> $$ = nterm mulOp ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102 78 104 136
Entering state 164
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_RPAR ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102 78 104 136 164 100
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102 78 104 136 164
Entering state 106
Reducing stack by rule 82 (line 181):
   $1 = nterm variable ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102 78 104 136 164
Entering state 176
Reducing stack by rule 74 (line 177):
   $1 = nterm mulOpFactorList ()
   $2 = nterm mulOp ()
   $3 = nterm factor ()
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102 78 104
Entering state 136
Next token is token TOKEN_RPAR ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102 78 103
Entering state 135
Next token is token TOKEN_RPAR ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102
Entering state 80
Next token is token TOKEN_RPAR ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164 102
Entering state 134
Next token is token TOKEN_RPAR ()
Shifting token TOKEN_RPAR ()
Entering state 155
Reducing stack by rule 85 (line 182):
   $1 = token TOKEN_LPAR ()
   $2 = nterm expression ()
   $3 = token TOKEN_RPAR ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104 136 164
Entering state 176
Reducing stack by rule 74 (line 177):
   $1 = nterm mulOpFactorList ()
   $2 = nterm mulOp ()
   $3 = nterm factor ()
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 104
Entering state 136
Reading a token: Next token is token TOKEN_END ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115 78 103
Entering state 135
Next token is token TOKEN_END ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80 115
Entering state 138
Reducing stack by rule 59 (line 164):
   $1 = nterm relationalOp ()
   $2 = nterm simpleExpression ()
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37 62 88
Entering state 123
Reducing stack by rule 39 (line 137):
   $1 = nterm variable ()
   $2 = token TOKEN_ASSIGN ()
   $3 = nterm expression ()
-> $$ = nterm assignmentStatement ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37
Entering state 59
Reducing stack by rule 36 (line 135):
   $1 = nterm assignmentStatement ()
-> $$ = nterm simpleStatement ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37
Entering state 58
Reducing stack by rule 34 (line 133):
   $1 = nterm simpleStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37
Entering state 56
Reducing stack by rule 32 (line 129):
   $1 = nterm statement ()
-> $$ = nterm statementSequence ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150 37
Entering state 55
Next token is token TOKEN_END ()
Shifting token TOKEN_END ()
Entering state 86
Reducing stack by rule 30 (line 127):
   $1 = token TOKEN_BEGIN ()
   $2 = nterm statementSequence ()
   $3 = token TOKEN_END ()
-> $$ = nterm compoundStatement ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169 150
Entering state 171
Reducing stack by rule 29 (line 125):
   $1 = nterm groupVariableDeclarations ()
   $2 = nterm compoundStatement ()
-> $$ = nterm block ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169
Entering state 152
Reducing stack by rule 23 (line 118):
   $1 = nterm block ()
-> $$ = nterm groupBlockForward ()
Stack now 0 1 3 5 7 13 21 35 48 73 93 127 147 169
Entering state 179
Reading a token: Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 181
Reducing stack by rule 22 (line 114):
   $1 = token TOKEN_FUNCTION ()
   $2 = token TOKEN_ID ()
   $3 = token TOKEN_LPAR ()
   $4 = nterm formalParameterList ()
   $5 = token TOKEN_RPAR ()
   $6 = token TOKEN_COLON ()
   $7 = nterm resultType ()
   $8 = token TOKEN_SEMICOLON ()
   $9 = nterm groupBlockForward ()
   $10 = token TOKEN_SEMICOLON ()
-> $$ = nterm functionDeclaration ()
Stack now 0 1 3 5 7 13
Entering state 27
Reducing stack by rule 18 (line 105):
   $1 = nterm functionDeclaration ()
-> $$ = nterm subprogramDeclarationList ()
Stack now 0 1 3 5 7 13
Entering state 25
Reading a token: Next token is token TOKEN_FUNCTION ()
Shifting token TOKEN_FUNCTION ()
Entering state 21
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 35
Reading a token: Next token is token TOKEN_LPAR ()
Shifting token TOKEN_LPAR ()
Entering state 48
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 17
Reducing stack by rule 96 (line 195):
   $1 = token TOKEN_ID ()
-> $$ = nterm identifierList ()
Stack now 0 1 3 5 7 13 25 21 35 48
Entering state 75
Reading a token: Next token is token TOKEN_COLON ()
Shifting token TOKEN_COLON ()
Entering state 95
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 30
Reducing stack by rule 47 (line 148):
   $1 = token TOKEN_ID ()
-> $$ = nterm type ()
Stack now 0 1 3 5 7 13 25 21 35 48 75 95
Entering state 129
Reducing stack by rule 28 (line 123):
   $1 = nterm identifierList ()
   $2 = token TOKEN_COLON ()
   $3 = nterm type ()
-> $$ = nterm formalParamSeq ()
Stack now 0 1 3 5 7 13 25 21 35 48
Entering state 74
Reading a token: Next token is token TOKEN_RPAR ()
Reducing stack by rule 25 (line 120):
   $1 = nterm formalParamSeq ()
-> $$ = nterm formalParameterList ()
Stack now 0 1 3 5 7 13 25 21 35 48
Entering state 73
Next token is token TOKEN_RPAR ()
Shifting token TOKEN_RPAR ()
Entering state 93
Reading a token: Next token is token TOKEN_COLON ()
Shifting token TOKEN_COLON ()
Entering state 127
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 146
Reducing stack by rule 50 (line 151):
   $1 = token TOKEN_ID ()
-> $$ = nterm resultType ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127
Entering state 147
Reading a token: Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 169
Reading a token: Next token is token TOKEN_BEGIN ()
Reducing stack by rule 5 (line 89):
-> $$ = nterm groupVariableDeclarations ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169
Entering state 150
Next token is token TOKEN_BEGIN ()
Shifting token TOKEN_BEGIN ()
Entering state 37
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 53
Reading a token: Next token is token TOKEN_ASSIGN ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 53
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37
Entering state 62
Next token is token TOKEN_ASSIGN ()
Shifting token TOKEN_ASSIGN ()
Entering state 88
Reading a token: Next token is token TOKEN_LPAR ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88
Entering state 78
Next token is token TOKEN_LPAR ()
Shifting token TOKEN_LPAR ()
Entering state 102
Reading a token: Next token is token TOKEN_LPAR ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102
Entering state 78
Next token is token TOKEN_LPAR ()
Shifting token TOKEN_LPAR ()
Entering state 102
Reading a token: Next token is token TOKEN_LPAR ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102
Entering state 78
Next token is token TOKEN_LPAR ()
Shifting token TOKEN_LPAR ()
Entering state 102
Reading a token: Next token is token TOKEN_ID ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102
Entering state 78
Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_MULTIPLY ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102 78 100
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102 78
Entering state 106
Reducing stack by rule 82 (line 181):
   $1 = nterm variable ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102 78 104
Entering state 136
Next token is token TOKEN_MULTIPLY ()
Shifting token TOKEN_MULTIPLY ()
Entering state 163
Reducing stack by rule 76 (line 179):
   $1 = token TOKEN_MULTIPLY ()
-> $$ = nterm mulOp ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102 78 104 136
Entering state 164
Reading a token: Next token is token TOKEN_INT ()
Shifting token TOKEN_INT ()
Entering state 101
Reducing stack by rule 80 (line 181):
   $1 = token TOKEN_INT ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102 78 104 136 164
Entering state 176
Reducing stack by rule 74 (line 177):
   $1 = nterm mulOpFactorList ()
   $2 = nterm mulOp ()
   $3 = nterm factor ()
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102 78 104
Entering state 136
Reading a token: Next token is token TOKEN_RPAR ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102 78 103
Entering state 135
Next token is token TOKEN_RPAR ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102
Entering state 80
Next token is token TOKEN_RPAR ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 102
Entering state 134
Next token is token TOKEN_RPAR ()
Shifting token TOKEN_RPAR ()
Entering state 155
Reducing stack by rule 85 (line 182):
   $1 = token TOKEN_LPAR ()
   $2 = nterm expression ()
   $3 = token TOKEN_RPAR ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 104
Entering state 136
Reading a token: Next token is token TOKEN_PLUS ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 103
Entering state 135
Next token is token TOKEN_PLUS ()
Shifting token TOKEN_PLUS ()
Entering state 157
Reducing stack by rule 70 (line 173):
   $1 = token TOKEN_PLUS ()
-> $$ = nterm addOp ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 103 135
Entering state 159
Reading a token: Next token is token TOKEN_INT ()
Shifting token TOKEN_INT ()
Entering state 101
Reducing stack by rule 80 (line 181):
   $1 = token TOKEN_INT ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 103 135 159
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 103 135 159 104
Entering state 136
Reading a token: Next token is token TOKEN_RPAR ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 103 135 159
Entering state 175
Reducing stack by rule 68 (line 171):
   $1 = nterm addOpTermList ()
   $2 = nterm addOp ()
   $3 = nterm term ()
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 78 103
Entering state 135
Next token is token TOKEN_RPAR ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102
Entering state 80
Next token is token TOKEN_RPAR ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 102
Entering state 134
Next token is token TOKEN_RPAR ()
Shifting token TOKEN_RPAR ()
Entering state 155
Reducing stack by rule 85 (line 182):
   $1 = token TOKEN_LPAR ()
   $2 = nterm expression ()
   $3 = token TOKEN_RPAR ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 104
Entering state 136
Reading a token: Next token is token TOKEN_DIV ()
Shifting token TOKEN_DIV ()
Entering state 161
Reducing stack by rule 77 (line 179):
   $1 = token TOKEN_DIV ()
-> $$ = nterm mulOp ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 104 136
Entering state 164
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_RPAR ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 104 136 164 100
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 104 136 164
Entering state 106
Reducing stack by rule 82 (line 181):
   $1 = nterm variable ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 104 136 164
Entering state 176
Reducing stack by rule 74 (line 177):
   $1 = nterm mulOpFactorList ()
   $2 = nterm mulOp ()
   $3 = nterm factor ()
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 104
Entering state 136
Next token is token TOKEN_RPAR ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 78 103
Entering state 135
Next token is token TOKEN_RPAR ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102
Entering state 80
Next token is token TOKEN_RPAR ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 102
Entering state 134
Next token is token TOKEN_RPAR ()
Shifting token TOKEN_RPAR ()
Entering state 155
Reducing stack by rule 85 (line 182):
   $1 = token TOKEN_LPAR ()
   $2 = nterm expression ()
   $3 = token TOKEN_RPAR ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 104
Entering state 136
Reading a token: Next token is token TOKEN_MINUS ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 103
Entering state 135
Next token is token TOKEN_MINUS ()
Shifting token TOKEN_MINUS ()
Entering state 158
Reducing stack by rule 71 (line 173):
   $1 = token TOKEN_MINUS ()
-> $$ = nterm addOp ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 103 135
Entering state 159
Reading a token: Next token is token TOKEN_INT ()
Shifting token TOKEN_INT ()
Entering state 101
Reducing stack by rule 80 (line 181):
   $1 = token TOKEN_INT ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 103 135 159
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 103 135 159 104
Entering state 136
Reading a token: Next token is token TOKEN_END ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 103 135 159
Entering state 175
Reducing stack by rule 68 (line 171):
   $1 = nterm addOpTermList ()
   $2 = nterm addOp ()
   $3 = nterm term ()
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 78 103
Entering state 135
Next token is token TOKEN_END ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88
Entering state 80
Next token is token TOKEN_END ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37 62 88
Entering state 123
Reducing stack by rule 39 (line 137):
   $1 = nterm variable ()
   $2 = token TOKEN_ASSIGN ()
   $3 = nterm expression ()
-> $$ = nterm assignmentStatement ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37
Entering state 59
Reducing stack by rule 36 (line 135):
   $1 = nterm assignmentStatement ()
-> $$ = nterm simpleStatement ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37
Entering state 58
Reducing stack by rule 34 (line 133):
   $1 = nterm simpleStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37
Entering state 56
Reducing stack by rule 32 (line 129):
   $1 = nterm statement ()
-> $$ = nterm statementSequence ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150 37
Entering state 55
Next token is token TOKEN_END ()
Shifting token TOKEN_END ()
Entering state 86
Reducing stack by rule 30 (line 127):
   $1 = token TOKEN_BEGIN ()
   $2 = nterm statementSequence ()
   $3 = token TOKEN_END ()
-> $$ = nterm compoundStatement ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169 150
Entering state 171
Reducing stack by rule 29 (line 125):
   $1 = nterm groupVariableDeclarations ()
   $2 = nterm compoundStatement ()
-> $$ = nterm block ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169
Entering state 152
Reducing stack by rule 23 (line 118):
   $1 = nterm block ()
-> $$ = nterm groupBlockForward ()
Stack now 0 1 3 5 7 13 25 21 35 48 73 93 127 147 169
Entering state 179
Reading a token: Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 181
Reducing stack by rule 22 (line 114):
   $1 = token TOKEN_FUNCTION ()
   $2 = token TOKEN_ID ()
   $3 = token TOKEN_LPAR ()
   $4 = nterm formalParameterList ()
   $5 = token TOKEN_RPAR ()
   $6 = token TOKEN_COLON ()
   $7 = nterm resultType ()
   $8 = token TOKEN_SEMICOLON ()
   $9 = nterm groupBlockForward ()
   $10 = token TOKEN_SEMICOLON ()
-> $$ = nterm functionDeclaration ()
Stack now 0 1 3 5 7 13 25
Entering state 40
Reducing stack by rule 16 (line 104):
   $1 = nterm subprogramDeclarationList ()
   $2 = nterm functionDeclaration ()
-> $$ = nterm subprogramDeclarationList ()
Stack now 0 1 3 5 7 13
Entering state 25
Reading a token: Next token is token TOKEN_BEGIN ()
Reducing stack by rule 14 (line 101):
   $1 = nterm subprogramDeclarationList ()
-> $$ = nterm subprogramDeclarations ()
Stack now 0 1 3 5 7 13
Entering state 24
Reducing stack by rule 6 (line 90):
   $1 = nterm subprogramDeclarations ()
-> $$ = nterm groupSubprogramDeclarations ()
Stack now 0 1 3 5 7 13
Entering state 23
Next token is token TOKEN_BEGIN ()
Shifting token TOKEN_BEGIN ()
Entering state 37
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 53
Reading a token: Next token is token TOKEN_ASSIGN ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 23 37 53
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 23 37
Entering state 62
Next token is token TOKEN_ASSIGN ()
Shifting token TOKEN_ASSIGN ()
Entering state 88
Reading a token: Next token is token TOKEN_ID ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 62 88
Entering state 78
Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_LPAR ()
Shifting token TOKEN_LPAR ()
Entering state 133
Reading a token: Next token is token TOKEN_RPAR ()
Reducing stack by rule 92 (line 191):
-> $$ = nterm actualParameterList ()
Stack now 0 1 3 5 7 13 23 37 62 88 78 100 133
Entering state 154
Next token is token TOKEN_RPAR ()
Shifting token TOKEN_RPAR ()
Entering state 174
Reducing stack by rule 86 (line 184):
   $1 = token TOKEN_ID ()
   $2 = token TOKEN_LPAR ()
   $3 = nterm actualParameterList ()
   $4 = token TOKEN_RPAR ()
-> $$ = nterm functionReference ()
Stack now 0 1 3 5 7 13 23 37 62 88 78
Entering state 105
Reducing stack by rule 83 (line 181):
   $1 = nterm functionReference ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 62 88 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 62 88 78 104
Entering state 136
Reading a token: Next token is token TOKEN_SEMICOLON ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 62 88 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 62 88 78 103
Entering state 135
Next token is token TOKEN_SEMICOLON ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 62 88
Entering state 80
Next token is token TOKEN_SEMICOLON ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 62 88 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 62 88
Entering state 123
Reducing stack by rule 39 (line 137):
   $1 = nterm variable ()
   $2 = token TOKEN_ASSIGN ()
   $3 = nterm expression ()
-> $$ = nterm assignmentStatement ()
Stack now 0 1 3 5 7 13 23 37
Entering state 59
Reducing stack by rule 36 (line 135):
   $1 = nterm assignmentStatement ()
-> $$ = nterm simpleStatement ()
Stack now 0 1 3 5 7 13 23 37
Entering state 58
Reducing stack by rule 34 (line 133):
   $1 = nterm simpleStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 23 37
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 23 37
Entering state 56
Reducing stack by rule 32 (line 129):
   $1 = nterm statement ()
-> $$ = nterm statementSequence ()
Stack now 0 1 3 5 7 13 23 37
Entering state 55
Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 87
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 53
Reading a token: Next token is token TOKEN_ASSIGN ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 23 37 55 87 53
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 62
Next token is token TOKEN_ASSIGN ()
Shifting token TOKEN_ASSIGN ()
Entering state 88
Reading a token: Next token is token TOKEN_ID ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 55 87 62 88
Entering state 78
Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_LPAR ()
Shifting token TOKEN_LPAR ()
Entering state 133
Reading a token: Next token is token TOKEN_RPAR ()
Reducing stack by rule 92 (line 191):
-> $$ = nterm actualParameterList ()
Stack now 0 1 3 5 7 13 23 37 55 87 62 88 78 100 133
Entering state 154
Next token is token TOKEN_RPAR ()
Shifting token TOKEN_RPAR ()
Entering state 174
Reducing stack by rule 86 (line 184):
   $1 = token TOKEN_ID ()
   $2 = token TOKEN_LPAR ()
   $3 = nterm actualParameterList ()
   $4 = token TOKEN_RPAR ()
-> $$ = nterm functionReference ()
Stack now 0 1 3 5 7 13 23 37 55 87 62 88 78
Entering state 105
Reducing stack by rule 83 (line 181):
   $1 = nterm functionReference ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 55 87 62 88 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 55 87 62 88 78 104
Entering state 136
Reading a token: Next token is token TOKEN_SEMICOLON ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 55 87 62 88 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 55 87 62 88 78 103
Entering state 135
Next token is token TOKEN_SEMICOLON ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 55 87 62 88
Entering state 80
Next token is token TOKEN_SEMICOLON ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 55 87 62 88 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 55 87 62 88
Entering state 123
Reducing stack by rule 39 (line 137):
   $1 = nterm variable ()
   $2 = token TOKEN_ASSIGN ()
   $3 = nterm expression ()
-> $$ = nterm assignmentStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 59
Reducing stack by rule 36 (line 135):
   $1 = nterm assignmentStatement ()
-> $$ = nterm simpleStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 58
Reducing stack by rule 34 (line 133):
   $1 = nterm simpleStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 122
Reducing stack by rule 31 (line 129):
   $1 = nterm statementSequence ()
   $2 = token TOKEN_SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statementSequence ()
Stack now 0 1 3 5 7 13 23 37
Entering state 55
Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 87
Reading a token: Next token is token TOKEN_FOR ()
Shifting token TOKEN_FOR ()
Entering state 50
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 77
Reading a token: Next token is token TOKEN_ASSIGN ()
Shifting token TOKEN_ASSIGN ()
Entering state 97
Reading a token: Next token is token TOKEN_INT ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97
Entering state 78
Next token is token TOKEN_INT ()
Shifting token TOKEN_INT ()
Entering state 101
Reducing stack by rule 80 (line 181):
   $1 = token TOKEN_INT ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 78 104
Entering state 136
Reading a token: Next token is token TOKEN_TO ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 78 103
Entering state 135
Next token is token TOKEN_TO ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97
Entering state 80
Next token is token TOKEN_TO ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97
Entering state 131
Next token is token TOKEN_TO ()
Shifting token TOKEN_TO ()
Entering state 153
Reading a token: Next token is token TOKEN_ID ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153
Entering state 78
Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_DO ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 78 100
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 78
Entering state 106
Reducing stack by rule 82 (line 181):
   $1 = nterm variable ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 78 104
Entering state 136
Next token is token TOKEN_DO ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 78 103
Entering state 135
Next token is token TOKEN_DO ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153
Entering state 80
Next token is token TOKEN_DO ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153
Entering state 173
Next token is token TOKEN_DO ()
Shifting token TOKEN_DO ()
Entering state 180
Reading a token: Next token is token TOKEN_BEGIN ()
Shifting token TOKEN_BEGIN ()
Entering state 37
Reading a token: Next token is token TOKEN_IF ()
Shifting token TOKEN_IF ()
Entering state 51
Reading a token: Next token is token TOKEN_ID ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51
Entering state 78
Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_LPAR ()
Shifting token TOKEN_LPAR ()
Entering state 133
Reading a token: Next token is token TOKEN_ID ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51 78 100 133
Entering state 78
Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_COMMAS ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51 78 100 133 78 100
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51 78 100 133 78
Entering state 106
Reducing stack by rule 82 (line 181):
   $1 = nterm variable ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51 78 100 133 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51 78 100 133 78 104
Entering state 136
Next token is token TOKEN_COMMAS ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51 78 100 133 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51 78 100 133 78 103
Entering state 135
Next token is token TOKEN_COMMAS ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51 78 100 133
Entering state 80
Next token is token TOKEN_COMMAS ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51 78 100 133 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51 78 100 133
Entering state 118
Reducing stack by rule 94 (line 193):
   $1 = nterm expression ()
-> $$ = nterm expressionList ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51 78 100 133
Entering state 120
Next token is token TOKEN_COMMAS ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 173 180 37 51 78 100 133 120
Entering state 78
Next token is token TOKEN_COMMAS ()
EEK, parse error!  Message: syntax error
