Starting parse
Entering state 0
Reading a token: Next token is token TOKEN_PROGRAM ()
Shifting token TOKEN_PROGRAM ()
Entering state 1
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 3
Reading a token: Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 5
Reading a token: Next token is token TOKEN_VAR ()
Reducing stack by rule 3 (line 88):
-> $$ = nterm groupTypeDefinitions ()
Stack now 0 1 3 5
Entering state 7
Next token is token TOKEN_VAR ()
Shifting token TOKEN_VAR ()
Entering state 12
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 17
Reducing stack by rule 96 (line 195):
   $1 = token TOKEN_ID ()
-> $$ = nterm identifierList ()
Stack now 0 1 3 5 7 12
Entering state 20
Reading a token: Next token is token TOKEN_COLON ()
Shifting token TOKEN_COLON ()
Entering state 34
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 30
Reducing stack by rule 47 (line 148):
   $1 = token TOKEN_ID ()
-> $$ = nterm type ()
Stack now 0 1 3 5 7 12 20 34
Entering state 47
Reading a token: Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 72
Reducing stack by rule 20 (line 109):
   $1 = nterm identifierList ()
   $2 = token TOKEN_COLON ()
   $3 = nterm type ()
   $4 = token TOKEN_SEMICOLON ()
-> $$ = nterm variableDeclaration ()
Stack now 0 1 3 5 7 12
Entering state 19
Reducing stack by rule 13 (line 99):
   $1 = nterm variableDeclaration ()
-> $$ = nterm variableDeclarationList ()
Stack now 0 1 3 5 7 12
Entering state 18
Reading a token: Next token is token TOKEN_BEGIN ()
Reducing stack by rule 11 (line 96):
   $1 = token TOKEN_VAR ()
   $2 = nterm variableDeclarationList ()
-> $$ = nterm variableDeclarations ()
Stack now 0 1 3 5 7
Entering state 14
Reducing stack by rule 4 (line 89):
   $1 = nterm variableDeclarations ()
-> $$ = nterm groupVariableDeclarations ()
Stack now 0 1 3 5 7
Entering state 13
Next token is token TOKEN_BEGIN ()
Reducing stack by rule 7 (line 90):
-> $$ = nterm groupSubprogramDeclarations ()
Stack now 0 1 3 5 7 13
Entering state 23
Next token is token TOKEN_BEGIN ()
Shifting token TOKEN_BEGIN ()
Entering state 37
Reading a token: Next token is token TOKEN_IF ()
Shifting token TOKEN_IF ()
Entering state 51
Reading a token: Next token is token TOKEN_LPAR ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 51
Entering state 78
Next token is token TOKEN_LPAR ()
Shifting token TOKEN_LPAR ()
Entering state 102
Reading a token: Next token is token TOKEN_ID ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 51 78 102
Entering state 78
Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_LT ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 78 100
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 78
Entering state 106
Reducing stack by rule 82 (line 181):
   $1 = nterm variable ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 78 104
Entering state 136
Next token is token TOKEN_LT ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 78 103
Entering state 135
Next token is token TOKEN_LT ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 51 78 102
Entering state 80
Next token is token TOKEN_LT ()
Shifting token TOKEN_LT ()
Entering state 109
Reducing stack by rule 61 (line 166):
   $1 = token TOKEN_LT ()
-> $$ = nterm relationalOp ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 80
Entering state 115
Reading a token: Next token is token TOKEN_INT ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 80 115
Entering state 78
Next token is token TOKEN_INT ()
Shifting token TOKEN_INT ()
Entering state 101
Reducing stack by rule 80 (line 181):
   $1 = token TOKEN_INT ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 80 115 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 80 115 78 104
Entering state 136
Reading a token: Next token is token TOKEN_RPAR ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 80 115 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 80 115 78 103
Entering state 135
Next token is token TOKEN_RPAR ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 80 115
Entering state 138
Reducing stack by rule 59 (line 164):
   $1 = nterm relationalOp ()
   $2 = nterm simpleExpression ()
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 51 78 102 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 51 78 102
Entering state 134
Next token is token TOKEN_RPAR ()
Shifting token TOKEN_RPAR ()
Entering state 155
Reducing stack by rule 85 (line 182):
   $1 = token TOKEN_LPAR ()
   $2 = nterm expression ()
   $3 = token TOKEN_RPAR ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 51 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 51 78 104
Entering state 136
Reading a token: Next token is token TOKEN_THEN ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 51 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 51 78 103
Entering state 135
Next token is token TOKEN_THEN ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 51
Entering state 80
Next token is token TOKEN_THEN ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 51 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 51
Entering state 79
Next token is token TOKEN_THEN ()
Shifting token TOKEN_THEN ()
Entering state 107
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 53
Reading a token: Next token is token TOKEN_ASSIGN ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 53
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 23 37 51 79 107
Entering state 62
Next token is token TOKEN_ASSIGN ()
Shifting token TOKEN_ASSIGN ()
Entering state 88
Reading a token: Next token is token TOKEN_INT ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 62 88
Entering state 78
Next token is token TOKEN_INT ()
Shifting token TOKEN_INT ()
Entering state 101
Reducing stack by rule 80 (line 181):
   $1 = token TOKEN_INT ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 62 88 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 62 88 78 104
Entering state 136
Reading a token: Next token is token TOKEN_ELSE ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 62 88 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 62 88 78 103
Entering state 135
Next token is token TOKEN_ELSE ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 62 88
Entering state 80
Next token is token TOKEN_ELSE ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 62 88 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 62 88
Entering state 123
Reducing stack by rule 39 (line 137):
   $1 = nterm variable ()
   $2 = token TOKEN_ASSIGN ()
   $3 = nterm expression ()
-> $$ = nterm assignmentStatement ()
Stack now 0 1 3 5 7 13 23 37 51 79 107
Entering state 59
Reducing stack by rule 36 (line 135):
   $1 = nterm assignmentStatement ()
-> $$ = nterm simpleStatement ()
Stack now 0 1 3 5 7 13 23 37 51 79 107
Entering state 58
Reducing stack by rule 34 (line 133):
   $1 = nterm simpleStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 23 37 51 79 107
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 23 37 51 79 107
Entering state 137
Next token is token TOKEN_ELSE ()
Shifting token TOKEN_ELSE ()
Entering state 165
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 53
Reading a token: Next token is token TOKEN_ASSIGN ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165 53
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165
Entering state 62
Next token is token TOKEN_ASSIGN ()
Shifting token TOKEN_ASSIGN ()
Entering state 88
Reading a token: Next token is token TOKEN_INT ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165 62 88
Entering state 78
Next token is token TOKEN_INT ()
Shifting token TOKEN_INT ()
Entering state 101
Reducing stack by rule 80 (line 181):
   $1 = token TOKEN_INT ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165 62 88 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165 62 88 78 104
Entering state 136
Reading a token: Next token is token TOKEN_SEMICOLON ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165 62 88 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165 62 88 78 103
Entering state 135
Next token is token TOKEN_SEMICOLON ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165 62 88
Entering state 80
Next token is token TOKEN_SEMICOLON ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165 62 88 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165 62 88
Entering state 123
Reducing stack by rule 39 (line 137):
   $1 = nterm variable ()
   $2 = token TOKEN_ASSIGN ()
   $3 = nterm expression ()
-> $$ = nterm assignmentStatement ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165
Entering state 59
Reducing stack by rule 36 (line 135):
   $1 = nterm assignmentStatement ()
-> $$ = nterm simpleStatement ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165
Entering state 58
Reducing stack by rule 34 (line 133):
   $1 = nterm simpleStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137 165
Entering state 178
Reducing stack by rule 45 (line 146):
   $1 = token TOKEN_ELSE ()
   $2 = nterm statement ()
-> $$ = nterm groupElseStatement ()
Stack now 0 1 3 5 7 13 23 37 51 79 107 137
Entering state 166
Reducing stack by rule 42 (line 142):
   $1 = token TOKEN_IF ()
   $2 = nterm expression ()
   $3 = token TOKEN_THEN ()
   $4 = nterm statement ()
   $5 = nterm groupElseStatement ()
-> $$ = nterm structuredStatement ()
Stack now 0 1 3 5 7 13 23 37
Entering state 61
Reducing stack by rule 35 (line 133):
   $1 = nterm structuredStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 23 37
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 23 37
Entering state 56
Reducing stack by rule 32 (line 129):
   $1 = nterm statement ()
-> $$ = nterm statementSequence ()
Stack now 0 1 3 5 7 13 23 37
Entering state 55
Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 87
Reading a token: Next token is token TOKEN_WHILE ()
Shifting token TOKEN_WHILE ()
Entering state 52
Reading a token: Next token is token TOKEN_LPAR ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 55 87 52
Entering state 78
Next token is token TOKEN_LPAR ()
Shifting token TOKEN_LPAR ()
Entering state 102
Reading a token: Next token is token TOKEN_ID ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102
Entering state 78
Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 100
Reading a token: Next token is token TOKEN_GT ()
Reducing stack by rule 90 (line 189):
-> $$ = nterm componentSelection ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 78 100
Entering state 85
Reducing stack by rule 87 (line 186):
   $1 = token TOKEN_ID ()
   $2 = nterm componentSelection ()
-> $$ = nterm variable ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 78
Entering state 106
Reducing stack by rule 82 (line 181):
   $1 = nterm variable ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 78 104
Entering state 136
Next token is token TOKEN_GT ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 78 103
Entering state 135
Next token is token TOKEN_GT ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102
Entering state 80
Next token is token TOKEN_GT ()
Shifting token TOKEN_GT ()
Entering state 111
Reducing stack by rule 63 (line 166):
   $1 = token TOKEN_GT ()
-> $$ = nterm relationalOp ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 80
Entering state 115
Reading a token: Next token is token TOKEN_INT ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 80 115
Entering state 78
Next token is token TOKEN_INT ()
Shifting token TOKEN_INT ()
Entering state 101
Reducing stack by rule 80 (line 181):
   $1 = token TOKEN_INT ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 80 115 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 80 115 78 104
Entering state 136
Reading a token: Next token is token TOKEN_RPAR ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 80 115 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 80 115 78 103
Entering state 135
Next token is token TOKEN_RPAR ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 80 115
Entering state 138
Reducing stack by rule 59 (line 164):
   $1 = nterm relationalOp ()
   $2 = nterm simpleExpression ()
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 102
Entering state 134
Next token is token TOKEN_RPAR ()
Shifting token TOKEN_RPAR ()
Entering state 155
Reducing stack by rule 85 (line 182):
   $1 = token TOKEN_LPAR ()
   $2 = nterm expression ()
   $3 = token TOKEN_RPAR ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 104
Entering state 136
Reading a token: Next token is token TOKEN_DO ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 78 103
Entering state 135
Next token is token TOKEN_DO ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 55 87 52
Entering state 80
Next token is token TOKEN_DO ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 55 87 52
Entering state 81
Next token is token TOKEN_DO ()
Shifting token TOKEN_DO ()
Entering state 116
Reading a token: Next token is token TOKEN_BEGIN ()
Shifting token TOKEN_BEGIN ()
Entering state 37
Reading a token: Next token is token TOKEN_END ()
Reducing stack by rule 38 (line 135):
-> $$ = nterm simpleStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 81 116 37
Entering state 58
Reducing stack by rule 34 (line 133):
   $1 = nterm simpleStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 81 116 37
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 81 116 37
Entering state 56
Reducing stack by rule 32 (line 129):
   $1 = nterm statement ()
-> $$ = nterm statementSequence ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 81 116 37
Entering state 55
Next token is token TOKEN_END ()
Shifting token TOKEN_END ()
Entering state 86
Reducing stack by rule 30 (line 127):
   $1 = token TOKEN_BEGIN ()
   $2 = nterm statementSequence ()
   $3 = token TOKEN_END ()
-> $$ = nterm compoundStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 81 116
Entering state 54
Reducing stack by rule 41 (line 141):
   $1 = nterm compoundStatement ()
-> $$ = nterm structuredStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 81 116
Entering state 61
Reducing stack by rule 35 (line 133):
   $1 = nterm structuredStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 81 116
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 23 37 55 87 52 81 116
Entering state 139
Reducing stack by rule 43 (line 143):
   $1 = token TOKEN_WHILE ()
   $2 = nterm expression ()
   $3 = token TOKEN_DO ()
   $4 = nterm statement ()
-> $$ = nterm structuredStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 61
Reducing stack by rule 35 (line 133):
   $1 = nterm structuredStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 122
Reducing stack by rule 31 (line 129):
   $1 = nterm statementSequence ()
   $2 = token TOKEN_SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statementSequence ()
Stack now 0 1 3 5 7 13 23 37
Entering state 55
Reading a token: Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 87
Reading a token: Next token is token TOKEN_FOR ()
Shifting token TOKEN_FOR ()
Entering state 50
Reading a token: Next token is token TOKEN_ID ()
Shifting token TOKEN_ID ()
Entering state 77
Reading a token: Next token is token TOKEN_ASSIGN ()
Shifting token TOKEN_ASSIGN ()
Entering state 97
Reading a token: Next token is token TOKEN_INT ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97
Entering state 78
Next token is token TOKEN_INT ()
Shifting token TOKEN_INT ()
Entering state 101
Reducing stack by rule 80 (line 181):
   $1 = token TOKEN_INT ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 78 104
Entering state 136
Reading a token: Next token is token TOKEN_TO ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 78 103
Entering state 135
Next token is token TOKEN_TO ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97
Entering state 80
Next token is token TOKEN_TO ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97
Entering state 131
Next token is token TOKEN_TO ()
Shifting token TOKEN_TO ()
Entering state 153
Reading a token: Next token is token TOKEN_INT ()
Reducing stack by rule 57 (line 160):
-> $$ = nterm groupSign ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153
Entering state 78
Next token is token TOKEN_INT ()
Shifting token TOKEN_INT ()
Entering state 101
Reducing stack by rule 80 (line 181):
   $1 = token TOKEN_INT ()
-> $$ = nterm factor ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 78
Entering state 104
Reducing stack by rule 75 (line 177):
-> $$ = nterm mulOpFactorList ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 78 104
Entering state 136
Reading a token: Next token is token TOKEN_DO ()
Reducing stack by rule 73 (line 175):
   $1 = nterm factor ()
   $2 = nterm mulOpFactorList ()
-> $$ = nterm term ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 78
Entering state 103
Reducing stack by rule 69 (line 171):
-> $$ = nterm addOpTermList ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 78 103
Entering state 135
Next token is token TOKEN_DO ()
Reducing stack by rule 67 (line 169):
   $1 = nterm groupSign ()
   $2 = nterm term ()
   $3 = nterm addOpTermList ()
-> $$ = nterm simpleExpression ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153
Entering state 80
Next token is token TOKEN_DO ()
Reducing stack by rule 60 (line 164):
-> $$ = nterm groupRelOpSimExpr ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 80
Entering state 114
Reducing stack by rule 58 (line 162):
   $1 = nterm simpleExpression ()
   $2 = nterm groupRelOpSimExpr ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153
Entering state 174
Next token is token TOKEN_DO ()
Shifting token TOKEN_DO ()
Entering state 181
Reading a token: Next token is token TOKEN_BEGIN ()
Shifting token TOKEN_BEGIN ()
Entering state 37
Reading a token: Next token is token TOKEN_END ()
Reducing stack by rule 38 (line 135):
-> $$ = nterm simpleStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 174 181 37
Entering state 58
Reducing stack by rule 34 (line 133):
   $1 = nterm simpleStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 174 181 37
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 174 181 37
Entering state 56
Reducing stack by rule 32 (line 129):
   $1 = nterm statement ()
-> $$ = nterm statementSequence ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 174 181 37
Entering state 55
Next token is token TOKEN_END ()
Shifting token TOKEN_END ()
Entering state 86
Reducing stack by rule 30 (line 127):
   $1 = token TOKEN_BEGIN ()
   $2 = nterm statementSequence ()
   $3 = token TOKEN_END ()
-> $$ = nterm compoundStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 174 181
Entering state 54
Reducing stack by rule 41 (line 141):
   $1 = nterm compoundStatement ()
-> $$ = nterm structuredStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 174 181
Entering state 61
Reducing stack by rule 35 (line 133):
   $1 = nterm structuredStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 174 181
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 23 37 55 87 50 77 97 131 153 174 181
Entering state 183
Reducing stack by rule 44 (line 144):
   $1 = token TOKEN_FOR ()
   $2 = token TOKEN_ID ()
   $3 = token TOKEN_ASSIGN ()
   $4 = nterm expression ()
   $5 = token TOKEN_TO ()
   $6 = nterm expression ()
   $7 = token TOKEN_DO ()
   $8 = nterm statement ()
-> $$ = nterm structuredStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 61
Reducing stack by rule 35 (line 133):
   $1 = nterm structuredStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 122
Reducing stack by rule 31 (line 129):
   $1 = nterm statementSequence ()
   $2 = token TOKEN_SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statementSequence ()
Stack now 0 1 3 5 7 13 23 37
Entering state 55
Reading a token: Next token is token TOKEN_SEMICOLON ()
Shifting token TOKEN_SEMICOLON ()
Entering state 87
Reading a token: Next token is token TOKEN_END ()
Reducing stack by rule 38 (line 135):
-> $$ = nterm simpleStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 58
Reducing stack by rule 34 (line 133):
   $1 = nterm simpleStatement ()
-> $$ = nterm groupSimStruStatement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 57
Reducing stack by rule 33 (line 131):
   $1 = nterm groupSimStruStatement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 7 13 23 37 55 87
Entering state 122
Reducing stack by rule 31 (line 129):
   $1 = nterm statementSequence ()
   $2 = token TOKEN_SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statementSequence ()
Stack now 0 1 3 5 7 13 23 37
Entering state 55
Next token is token TOKEN_END ()
Shifting token TOKEN_END ()
Entering state 86
Reducing stack by rule 30 (line 127):
   $1 = token TOKEN_BEGIN ()
   $2 = nterm statementSequence ()
   $3 = token TOKEN_END ()
-> $$ = nterm compoundStatement ()
Stack now 0 1 3 5 7 13 23
Entering state 38
Reading a token: Next token is token TOKEN_DOT ()
Shifting token TOKEN_DOT ()
Entering state 63
Reducing stack by rule 1 (line 83):
   $1 = token TOKEN_PROGRAM ()
   $2 = token TOKEN_ID ()
   $3 = token TOKEN_SEMICOLON ()
   $4 = nterm groupTypeDefinitions ()
   $5 = nterm groupVariableDeclarations ()
   $6 = nterm groupSubprogramDeclarations ()
   $7 = nterm compoundStatement ()
   $8 = token TOKEN_DOT ()
program
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
